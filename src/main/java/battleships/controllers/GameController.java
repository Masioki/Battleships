package battleships.controllers;


import battleships.config.websocket.CustomPrincipal;
import battleships.domain.User;
import battleships.dto.MoveDTO;
import battleships.services.GameService;
import battleships.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.messaging.simp.annotation.SubscribeMapping;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.stereotype.Controller;
import org.springframework.web.socket.messaging.SessionDisconnectEvent;
import org.springframework.web.socket.messaging.SessionUnsubscribeEvent;

import javax.websocket.server.PathParam;
import java.security.Principal;

@Controller
public class GameController {

    @Autowired
    private GameService gameService;

    @Autowired
    private UserService userService;

    @Autowired
    private SimpMessagingTemplate messaging;


    @EventListener
    public void handleSessionDisconnected(SessionDisconnectEvent event) {
        Principal principal = event.getUser();
        if (principal != null) {
            String username = principal.getName();
            User u = userService.getUser(username);
            String destination = StompHeaderAccessor.wrap(event.getMessage()).getDestination();
            if (u.isAutoGenerated()) {
                gameService.guestSurrenderAndSend(username, destination);
                userService.removeGuest(username);
            }
        }
    }

    @EventListener
    public void handleUnsubscribe(SessionUnsubscribeEvent event) {
        Principal principal = event.getUser();
        if (principal != null) {
            String username = principal.getName();
            User u = userService.getUser(username);
            String destination = StompHeaderAccessor.wrap(event.getMessage()).getDestination();
            if (u.isAutoGenerated()) {
                gameService.guestSurrenderAndSend(username, destination);
            }
        }
    }


    @SubscribeMapping("/topic/{gameID}")
    public String joinGame(CustomPrincipal principal, @PathParam("gameID") int gameID) {
        return null; //TODO
    }

    @MessageMapping("/game/{gameID}")
    @SendTo("/topic/{gameID}")
    public MoveDTO move(CustomPrincipal principal, @Payload MoveDTO moveDTO, @PathParam("gameID") int gameID) {
        moveDTO.setUsername(principal.getName());
        //TODO
        return null;
    }
}
