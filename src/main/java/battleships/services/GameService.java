package battleships.services;

import battleships.domain.Game.BattleshipGame;
import battleships.domain.Game.GameStatus;
import battleships.domain.Game.Move;
import battleships.domain.ship.Ship;
import battleships.domain.user.AbstractUser;
import battleships.dto.MoveDTO;
import battleships.dto.ShipDTO;
import battleships.exceptions.GameFinishedException;
import battleships.exceptions.ShipDestroyedException;
import battleships.exceptions.WrongMoveException;
import battleships.exceptions.WrongShipSetException;
import battleships.repositories.GameRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

//TODO: ADD ASYNC

@Service
public class GameService {


    @Autowired
    private GameRepository repository;

    @Autowired
    private UserService userService;

    @Autowired
    private ActiveGamesAndUsersRegistry registry;


    public Move move(AbstractUser user, MoveDTO move, int gameID)
            throws WrongMoveException, ShipDestroyedException, GameFinishedException {
        BattleshipGame game = getGame(gameID);
        move.setUsername(user.getName());
        Move result = null;
        if (game != null && game.getGameStatus() == GameStatus.IN_PROGRESS) {
            try {
                result = game.attack(move);
            } catch (GameFinishedException gfe) {
                String winner = game.getWinnerUsername();
                String loser = game.getOpponentUsername(winner);
                if (loser != null) userService.updatePoints(winner, loser);
                removeGame(gameID);
                throw gfe;
            }
        }
        return result;
    }

    public Move surrender(AbstractUser user, int gameID) throws WrongMoveException {
        BattleshipGame game = getGame(gameID);
        Move m = null;
        if (game != null && game.getGameStatus() == GameStatus.IN_PROGRESS) {
            m = game.surrender(user.getName());
            String opponent = game.getOpponentUsername(user.getName());
            userService.updatePoints(opponent, user.getName());
            removeGame(gameID);
        }
        return m;
    }

    public void removeGame(int gameID) {
        BattleshipGame game = getGame(gameID);
        if (game != null) repository.removeBattleshipGame(game);
        registry.removeGame(gameID);
    }

    public BattleshipGame getGame(int gameID) {
        BattleshipGame game = registry.getGame(gameID);
        if (game == null) game = repository.getBattleshipGame(gameID);
        return game;
    }

    public int saveGame(BattleshipGame game) {
        try {
            return repository.saveBattleshipGame(game);
        } catch (Exception e) {
            return -1; //TODO
        }
    }

    public int createGame(String ownerUsername, List<ShipDTO> shipsDTO) throws Exception {
        BattleshipGame game = new BattleshipGame(ownerUsername);
        if (!registry.containsUser(ownerUsername)) throw new IllegalAccessException();
        shipsDTO.forEach(shipDTO -> shipDTO.setUsername(ownerUsername));
        List<Ship> ships = shipsDTO.stream()
                .map(Ship::getShipFromDTO)
                .collect(Collectors.toList());
        ships.forEach(ship -> ship.setBattleshipGame(game));
        if (!game.joinGame(ships)) throw new WrongShipSetException(ownerUsername);
        int id = saveGame(game);
        registry.addGame(game);
        return id;
    }

    public boolean joinGame(AbstractUser user, int gameID, List<ShipDTO> shipsDTO) throws Exception {
        BattleshipGame game = registry.getGame(gameID);
        if (game == null) return false;
        shipsDTO.forEach(shipDTO -> shipDTO.setUsername(user.getName()));
        List<Ship> ships = shipsDTO.stream()
                .map(Ship::getShipFromDTO)
                .collect(Collectors.toList());
        ships.forEach(ship -> ship.setBattleshipGame(game));
        boolean result = game.joinGame(ships);
        if (result && !user.isAutoGenerated()) repository.saveBattleshipGame(game);
        return result;
    }
}
